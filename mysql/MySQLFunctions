-- Functions for SMSChallenge!


-- This function just checks if the right name and password is given, and if the user is allowed to log in
-- return 0 = wrong baselogin return 1 = correct baselogin

DROP FUNCTION IF EXISTS `smschallenge`.`base_login`;
DELIMITER $$
CREATE FUNCTION `smschallenge`.`base_login` (username VARCHAR(1024), password VARCHAR(1024) )
  RETURNS TINYINT(1) DETERMINISTIC
  BEGIN	
    DECLARE counted INT DEFAULT 0; 
    DECLARE wrong_pw INT DEFAULT 0;
    DECLARE not_active INT DEFAULT 0;
    DECLARE permission INT DEFAULT 0;
    DECLARE log_result INT DEFAULT 0;
    DECLARE synced TINYINT DEFAULT 0;
    DECLARE existing INT DEFAULT 0;
    DECLARE salt VARCHAR(6);
    SET username = LOWER(username);
    -- use function to check pw
    SELECT check_password( `username`, `password`) INTO counted;
    -- the user exists and the given password is also correct
    IF counted = 1 THEN
      -- check the permission
      SELECT `user` . `permissionStatus` INTO `permission` FROM `user` WHERE `user` . `username` = `username`;
      -- if denied, directly return 0
      IF permission = 1 THEN
        SELECT set_log( `username`, 'warning', 'base_login(): This user is denied to log in.') INTO log_result;
        RETURN 0;
      -- if explicit allowed directly return 1
      ELSEIF permission = 2 THEN
        RETURN 1;
      -- if permission normal, check if the user is synced
      ELSEIF permission = 0 THEN
        SELECT `user` . `synced` into `synced` FROM `user` WHERE `user` . `username` = `username`;
        -- if the user is synced return 1
        IF synced = 1 THEN
          RETURN 1;
        -- if the user is not synced return 0
        ELSE
          SELECT set_log( `username`, 'warning', 'base_login(): This user is not synced.') INTO log_result;
          RETURN 0;
        END IF;
      END IF;
    ELSE
      -- if the user doesn't exist or has given a wrong password check what failed
      SELECT COUNT(*) INTO `existing` FROM `user` WHERE `user`.`username` = `username`;
      IF existing = 0 THEN
        SELECT set_log( `username`, 'warning', 'base_login(): This user is not in the Database.') INTO log_result;
        RETURN 0;
      END IF;
      SELECT COUNT(*) INTO not_active FROM `user` WHERE `user`.`username` = `username` AND `user`.`password` IS NULL;
      IF not_active = 1 THEN
        SELECT set_log( `username`, 'warning', 'base_login(): This users account is not active. He has to set his password first.') INTO log_result;
        RETURN 0;
      END IF;
      -- read out the salt
      SELECT `user` . `salt` INTO `salt`  FROM `user` WHERE `user`.`username` = `username`;
      SELECT COUNT(*) INTO wrong_pw FROM `user` WHERE `user` . `username` = `username` AND `user` . `password` != sha1(CONCAT(sha1(CONCAT(sha1(CONCAT(sha1(CONCAT(sha1(CONCAT(`password`, `salt`)), `salt`)), `salt`)), `salt`)) , `salt`)) ;
      IF wrong_pw = 1 THEN
        SELECT set_log( `username`, 'warning', 'base_login(): This user has entered a wrong password.') INTO log_result;
        RETURN 0;
      END IF;
      SELECT set_log( `username`, 'error', 'base_login(): Something went wrong.') INTO log_result;
    END IF;
  RETURN 0;
END $$

DELIMITER ;


-- This functions checks the password
-- return 0=pw false 	return 1= pw right

DROP FUNCTION IF EXISTS `smschallenge`.`check_password`;
DELIMITER $$
CREATE FUNCTION `smschallenge`.`check_password` (username VARCHAR(1024), password VARCHAR(1024) )
  RETURNS TINYINT(1) DETERMINISTIC
  BEGIN
    DECLARE counted INT DEFAULT 0;
    DECLARE wrong_pw TINYINT DEFAULT 0;
    DECLARE log_result INT DEFAULT 0;
    DECLARE salt VARCHAR(6);
    SET username = LOWER(username);
    -- read out the salt
    SELECT `user` . `salt` INTO `salt`  FROM `user` WHERE `user`.`username` = `username`;
    -- check if the user exist and has given his right password
    SELECT COUNT(*) INTO counted FROM `user` WHERE `user` . `username` = `username` AND `user` . `password` = sha1(CONCAT(sha1(CONCAT(sha1(CONCAT(sha1(CONCAT(sha1(CONCAT(`password`, `salt`)), `salt`)), `salt`)), `salt`)) , `salt`));
    -- the user exists and the given password is also correct
    IF counted = 1 THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
  END $$

DELIMITER ;

-- This functions checks the entered code which should be the same as the saved before
-- return 0=codelogin failed 	return 1= codelogin correct

DROP FUNCTION IF EXISTS `smschallenge`.`code_login`;
DELIMITER $$
CREATE FUNCTION `smschallenge`.`code_login` (username VARCHAR(1024), code VARCHAR(1024) )
  RETURNS TINYINT(1) DETERMINISTIC
  BEGIN
    DECLARE counted INT DEFAULT 0;
    DECLARE loggedin TINYINT DEFAULT 0;
    DECLARE log_result INT DEFAULT 0;
    SET username = LOWER(username);
    SET code = REPLACE(code, ' ', '' );
    -- check if the user typed his right code
    SELECT COUNT(*) INTO counted FROM `user` WHERE `user`.`username` = `username` AND `user`.`code` = `code`;
    -- user has typed the right code, log this and set loggedin to true
    IF counted = 1 THEN
      UPDATE `user` SET `lastLogin` = NOW() WHERE `user`.`username` = `username` AND `user`.`code` = `code`;
      SELECT set_log( `username`, 'info', 'code_login(): This user logged in successfully.') INTO log_result;
      SET loggedin = 1;
    ELSE
    -- user entered a wrong code, log this
      SELECT set_log( `username`, 'warning', 'code_login(): The given SMS-Code seems to be incorrect.') INTO log_result;
    END IF;
    RETURN loggedin;
  END $$

DELIMITER ;


-- save the code into the table

DROP FUNCTION IF EXISTS `smschallenge`.`set_code`;
DELIMITER $$
CREATE FUNCTION `smschallenge`.`set_code` ( username VARCHAR(1024), code VARCHAR(1024) )
  RETURNS TINYINT(1) DETERMINISTIC
  BEGIN
    DECLARE returnValue INT DEFAULT 0;
    DECLARE counted INT DEFAULT 0;
    DECLARE log_result INT DEFAULT 0;
    SET code = REPLACE(code, ' ', '' );
    SET username = LOWER(username);
    -- set code in db
    UPDATE `user` SET `user`.`code` = `code` WHERE `user`.`username` = `username`;
    -- check for error
    SELECT COUNT(*) INTO counted FROM `user` WHERE `user`.`username` = `username` AND `user`.`code` = `code`;
    -- everything fine
    IF counted = 1 THEN
      SET returnValue = 1;
    -- something went wrong --> log this
    ELSE
      SELECT set_log( `username`, 'error', 'set_code(): The new code couldnt be saved in the DB.') INTO log_result;
    END IF;
    RETURN returnValue;
  END $$

DELIMITER ;


-- get the Phone number of an user

DELIMITER $$
DROP FUNCTION IF EXISTS `smschallenge`.`get_phone_number`;
CREATE FUNCTION `smschallenge`.`get_phone_number` ( username VARCHAR(1024) )
  RETURNS VARCHAR(1024) DETERMINISTIC
  BEGIN
    DECLARE log_result INT DEFAULT 0;
    DECLARE phone VARCHAR(1024);
    DECLARE phone_as_int BIGINT DEFAULT 0;
    DECLARE length BIGINT DEFAULT 9;
    DECLARE temp_length VARCHAR(24);
    DECLARE string_length INT(11) DEFAULT 0;
    SET username = LOWER(username);
    -- get phone number  
    SELECT `user`.`mobileNumber` INTO phone FROM `user` WHERE `user` . `username` = `username`;
    -- change to the right format
    SET phone = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( phone , '+', '00'), '-', ''), ' ', ''), ')', ''), '(', '');
    SELECT CAST(phone AS UNSIGNED) INTO phone_as_int;
    SELECT CAST(phone_as_int AS CHAR) INTO phone;
    SELECT LENGTH(phone) INTO string_length;
    IF string_length > length-1 THEN
      SELECT CONCAT( '0', phone) INTO phone;
      SELECT LENGTH(phone) INTO string_length;
      IF string_length >= length+2 THEN
        SELECT CONCAT( '0', phone) INTO phone;
      END IF;
      RETURN phone;
    -- no valid phonenumber found
   ELSE
      SELECT set_log( `username`, 'error', 'get_phone_number(): There was no valid phonenumber found.') INTO log_result;
      RETURN '';
    END IF;
  END $$

DELIMITER ;



-- set the password

DROP FUNCTION IF EXISTS `smschallenge`.`set_password`;

DELIMITER $$

CREATE FUNCTION `smschallenge`.`set_password` ( username VARCHAR(1024), password VARCHAR(1024) )
  RETURNS TINYINT(1) DETERMINISTIC
  BEGIN
    DECLARE returnValue INT DEFAULT 0;
    DECLARE counted INT DEFAULT 0;
    DECLARE log_result INT DEFAULT 0;
    DECLARE salt VARCHAR(6);
    SET username = LOWER(username);
    -- generate salt
    SELECT SUBSTRING(MD5(RAND()) FROM 1 FOR 6) INTO `salt`;
    -- set password
    UPDATE `user` SET password = sha1(CONCAT(sha1(CONCAT(sha1(CONCAT(sha1(CONCAT(sha1(CONCAT(`password`, `salt`)), `salt`)), `salt`)), `salt`)), `salt`)) , `lastChange` = NOW(), `user`. `salt` = `salt` WHERE `user`.`username` = `username`;
    -- check for errors
    SELECT COUNT(*) INTO counted FROM `user` WHERE `user`.`username` = `username` AND `user`.`password` = sha1(CONCAT(sha1(CONCAT(sha1(CONCAT(sha1(CONCAT(sha1(CONCAT(`password`, `salt`)), `salt`)), `salt`)), `salt`)) , `salt`)) ;
    -- everything fine
    IF counted = 1 THEN
      SET returnValue = 1;
    -- something went wrong, log this
    ELSE
      SELECT set_log( `username`, 'error', 'set_code(): The new password couldnt be saved in the DB.') INTO log_result;
    END IF;
    RETURN returnValue;
  END $$

DELIMITER ;

-- set log

DROP FUNCTION IF EXISTS `smschallenge`.`set_log`;
DELIMITER $$
CREATE FUNCTION `smschallenge`.`set_log` ( username VARCHAR(1024), priority VARCHAR(1024), what VARCHAR(1024) )
  RETURNS TINYINT(1) DETERMINISTIC
  BEGIN
    DECLARE prio VARCHAR(8);
    DECLARE temp_val VARCHAR(2);
    DECLARE id_user INT(11) DEFAULT 0; 
    SET prio = "info";
    SET username = LOWER(username);
    -- get userid
    SELECT `user`.`id` INTO id_user FROM `user` WHERE `user` . `username` = `username`;
    -- set log
    INSERT INTO `log` (`id_user`, `host`, `time`, `priority`, `message`) VALUES( id_user, substring_index(user(), '@', -1),  NOW(), priority, what);
  RETURN 0;
  END $$

DELIMITER ;
